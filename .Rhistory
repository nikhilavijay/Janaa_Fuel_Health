value = 0,
step = 0.1),
div(class= "header-style1", tags$h5(tags$b("3. Enter # of units of fuel needed to meet your monthly cooking needs "))),
tags$h6("(e.g. the units for LPG is cylinder, firewod is kg etc.)"),
numericInput(
inputId = "u1", div(class= "text-style", tags$h5("# of Units used per month - Fuel 1")),
value = 0,
min = 0,
max = 100,
step = 0.1),
numericInput(
inputId = "u2", div(class= "text-style", tags$h5("# of Units used per month - Fuel 2")),
value = 0,
min = 0,
max = 100,
step = 0.1),
div(class= "header-style1", tags$h5(tags$b("4. Enter the cost of Stove/s associated with selected Fuels "))),
numericInput(
inputId = "stove", div(class= "text-style", tags$h5("Total Cost of Stove")),
value = 0,
min = 0,
max = 100,
step = 0.1))
)
)
)
)
)
)
))
ui <- fluidPage(theme = shinytheme("cosmo"),
tags$style(HTML("
.sidebar-text {
font-size: 30px;
text-align: left;
color: navy;
}
.column-style {
background-color: lightblue;
padding: 15px;
border-radius: 5px;
margin-bottom: 15px;
}
.column-style1 {
background-color: lightpink;
padding: 15px;
border-radius: 5px;
margin-bottom: 15px;
}
.header-style {
color: SlateGray;
font-size: 26px;
}
.header-style1 {
color: SteelBlue;
font-size: 20px;
font-family: Tahoma, sans-serif;
}
.header-style2 {
color: LightSlateGray;
font-size: 18px;
font-family: Tahoma, sans-serif;
}
.text-style {
color: Teal;
}
.custom-box {
height: 55px; /* Set your desired height */
font-size: 20px;
}
.custom-box1 {
background-color: LightSteelBlue ;
height: 65px; /* Set your desired height */
font-size: 20px;
}
.custom-box2 {
height: 50px; /* Set your desired height */
font-size: 20px;
color: lightgray;
}
.info-icon {
font-size: 10px;
background: #007bff;
color: white;
border-radius: 50%;
padding: 5px;
cursor: pointer;
margin-left: 10px;
}
")),
navbarPage(
"Clean Energy Pathways: Odisha", id ="nav",
tabPanel("Cost Calculator",
dashboardPage(
dashboardHeader(title = tags$h3(""), titleWidth = 100),
dashboardSidebar(disable = FALSE), # Disable sidebar for simplicity
dashboardBody(
fluidPage(
sidebarLayout(
sidebarPanel(width = 3,
tags$h3("Sample Responses"),
tags$h4("Total n = 5369"),
div(textOutput("sample"), class = "sidebar-text"),
tags$h3("Filters"),
selectInput("fuel1", "Commonly Used Fuel Mixes", choices = c("100% LPG","100% Electric", "100% Firewood", "100% Kerosene", "100% Coal",">50% LPG & <50% Firewood","<50% LPG & >50% Firewood","50% LPG & 50% Firewood","<100% Electric","<100% Kerosene","<100% Coal","Others: dung, eating outside"), selected = "100% LPG", multiple = FALSE),
selectInput("lpg", "For LPG: Cylinder Size", choices = c("7 kg","14 kg","All"), selected = "All", multiple = FALSE),
selectInput("fuel2", "Clean Fuels", choices = c("Improved Biomass Cookstove","Electric Induction","Solar Nutan","Community Biogas"), selected= "Community Biogas", multiple = FALSE),
sliderInput("hh", "# of HH members", value = c(0, 15), min = 0, max = 15),
sliderInput("hh_exp", "Average monthly HH expenditure", value = c(0, 43000), min = 0, max = 43000)
),
mainPanel(
fluidRow(
column(7, class = "column-style",
div(class= "header-style", tags$b("Cooking Fuel Usage: Survey Results")),
tags$br(),
div(class= "header-style2", tags$b("Usage Behaviour of Current Fuel Mixes")),
tags$br(),
box(
title = "Cooking: Total Fuel Cost (p.m.)",
width = 4, # Full width within the column
collapsible = FALSE,
solidHeader = FALSE,
background = "teal",
class = "custom-box2",
textOutput("total_cost")
),
box(
title = "Cost for Selected Fuel (p.m.)",
width = 4, # Full width within the column
solidHeader = FALSE,
collapsible = FALSE,
background = "teal",
class = "custom-box2",
textOutput("selected_cost")
),
box(
title = "Average Subsidy (p.m.)",
width = 4, # Full width within the column
solidHeader = FALSE,
collapsible = FALSE,
background = "teal",
class = "custom-box2",
textOutput("subsidy")
),
div(class= "header-style2", tags$b("Expected Costs for Cleaner Fuels")),
div(class= "header-style2", tags$b("Willingness to Pay for Cooking Fuel")),
tags$h3("Section 1")
),
column(5, class = "column-style1",
div(class= "header-style", tags$b("Fuel Cost Calculator")),
tags$br(),
#OUTPUT VALUES
box(
title = "Monthly Fuel Cost",
width = 6, # Full width within the column
solidHeader = FALSE,
background = "lightblue",
collapsible = FALSE,
class = "custom-box",
textOutput("fuel_cost")),
box(
title ="Total Yearly Savings",
width = 6, # Full width within the column
solidHeader = FALSE,
background = "lightblue",
collapsible = FALSE,
class = "custom-box",
textOutput("year_cost")),
box(
title = tagList("Payback Period for Stove Cost",
actionButton("info_btn", label = NULL, icon = icon("info-circle"), class = "info-icon")),
width = 12, # Full width within the column
background = "lightblue",
status = "primary",
solidHeader = TRUE,
collapsible = FALSE,
class = "custom-box1",
textOutput("payback"),
bsModal("info_modal", "Information", "info_btn", size = "small", "This is the payback period is calculated for the cost in excess of WTP")),
#INPUT VALUES
div(class= "header-style1", tags$h5(tags$b("1. How much are you WTP for cooking fuel per month & Cooking Stove? (INR)"))),
numericInput(
inputId = "w", div(class= "text-style", tags$h5("WTP per month for cooking fuel")),
value = 0,
min = 0,
max = 8000,
step = 0.1),
numericInput(
inputId = "ws", div(class= "text-style", tags$h5("WTP for Cooking Stove")),
value = 0,
min = 0,
max = 15000,
step = 0.1),
div(class= "header-style1", tags$h5(tags$b("2. Enter the monthly fuel cost per unit for your fuel (INR)"))),
tags$h6("(You can reference the cost values from our survey/FGD data or enter your own value.If you are using a fuel mix, you can enter values for more than one fuel.)"),
numericInput(
inputId = "f1", div(class= "text-style", tags$h5("Variable Monthly Cost of Fuel 1")),
value = 0,
min = 0,
max = 6000,
step = 0.1),
numericInput(
inputId = "f2", div(class= "text-style", tags$h5("Variable Monthly Cost of Fuel 2")),
min = 0,
max = 6000,
value = 0,
step = 0.1),
div(class= "header-style1", tags$h5(tags$b("3. Enter # of units of fuel needed to meet your monthly cooking needs "))),
tags$h6("(e.g. the units for LPG is cylinder, firewod is kg etc.)"),
numericInput(
inputId = "u1", div(class= "text-style", tags$h5("# of Units used per month - Fuel 1")),
value = 0,
min = 0,
max = 100,
step = 0.1),
numericInput(
inputId = "u2", div(class= "text-style", tags$h5("# of Units used per month - Fuel 2")),
value = 0,
min = 0,
max = 100,
step = 0.1),
div(class= "header-style1", tags$h5(tags$b("4. Enter the cost of Stove/s associated with selected Fuels "))),
numericInput(
inputId = "stove", div(class= "text-style", tags$h5("Total Cost of Stove")),
value = 0,
min = 0,
max = 100,
step = 0.1))
)
)
)
)
)
))
))
merged_data_28062024 <- read.csv("C:/Users/Nikhila Vijay/Dropbox/J&K Smart Metering/PhaseII_Implementation/Monitoring&Reporting_dashboard/merged_data_28062024.csv")
View(merged_data_28062024)
df <- merged_data_28062024
View(df)
install.packages("leaflet")
install.packages("dplyr")  # for data manipulation
library(leaflet)
library(dplyr)
df <- read.csv("C:/Users/Nikhila Vijay/Dropbox/J&K Smart Metering/PhaseII_Implementation/Monitoring&Reporting_dashboard/lat_long_aug24.csv")
View(df)
leaflet(data) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addCircleMarkers(
~lon, ~lat,
color = ~pal(sdo_name),
radius = 4,
stroke = FALSE,
fillOpacity = 0.8,
popup = ~paste("Value:", sdo_name)
) %>%
addLegend(
"bottomright",
pal = pal,
values = ~sdo_name,
title = "Value",
opacity = 1
)
leaflet(df) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addCircleMarkers(
~lon, ~lat,
color = ~pal(sdo_name),
radius = 4,
stroke = FALSE,
fillOpacity = 0.8,
popup = ~paste("Value:", sdo_name)
) %>%
addLegend(
"bottomright",
pal = pal,
values = ~sdo_name,
title = "Value",
opacity = 1
)
leaflet(df) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addCircleMarkers(
~long, ~lat,
color = ~pal(sdo_name),
radius = 4,
stroke = FALSE,
fillOpacity = 0.8,
popup = ~paste("Value:", sdo_name)
) %>%
addLegend(
"bottomright",
pal = pal,
values = ~sdo_name,
title = "Value",
opacity = 1
)
df <- read.csv("C:/Users/Nikhila Vijay/Dropbox/J&K Smart Metering/PhaseII_Implementation/Monitoring&Reporting_dashboard/lat_long_aug24.csv")
View(df)
pal <- colorNumeric(palette = "YlOrRd", domain = df$sdo_name)
install.packages("leaflet")
install.packages("dplyr")  # for data manipulation
library(leaflet)
library(dplyr)
install.packages("leaflet")
install.packages("leaflet")
install.packages("dplyr")  # for data manipulation
library(leaflet)
library(dplyr)
df <- read.csv("C:/Users/Nikhila Vijay/Dropbox/J&K Smart Metering/PhaseII_Implementation/Monitoring&Reporting_dashboard/lat_long_aug24.csv")
View(df)
pal <- colorNumeric(palette = "YlOrRd", domain = df$sdo_name)
leaflet(df) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addCircleMarkers(
~long, ~lat,
color = ~pal(sdo_name),
radius = 4,
stroke = FALSE,
fillOpacity = 0.8,
popup = ~paste("Value:", sdo_name)
) %>%
addLegend(
"bottomright",
pal = pal,
values = ~sdo_name,
title = "Value",
opacity = 1
)
df$lat <- as.numeric(df$lat)
df$long <- as.numeric(df$long)
leaflet(df) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addCircleMarkers(
~long, ~lat,
color = ~pal(sdo_name),
radius = 4,
stroke = FALSE,
fillOpacity = 0.8,
popup = ~paste("Value:", sdo_name)
) %>%
addLegend(
"bottomright",
pal = pal,
values = ~sdo_name,
title = "Value",
opacity = 1
)
pal <- colorNumeric(palette = "YlOrRd", domain = df$sdo_name)
pal <- colorFactor(palette = "Set1", domain = df$sdo_name)
leaflet(df) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
addCircleMarkers(
~long, ~lat,
color = ~pal(sdo_name),
radius = 4,
stroke = FALSE,
fillOpacity = 0.8,
popup = ~paste("Value:", sdo_name)
) %>%
addLegend(
"bottomright",
pal = pal,
values = ~sdo_name,
title = "SDO",
opacity = 1
)
leaflet(df) %>%
addTiles() %>%  # Add default OpenStreetMap tiles
setView(lng = 74.797371, lat = 34.083656, zoom = 7) %>%
addCircleMarkers(
~long, ~lat,
color = ~pal(sdo_name),
radius = 4,
stroke = FALSE,
fillOpacity = 0.8,
popup = ~paste("Value:", sdo_name)
) %>%
addLegend(
"bottomright",
pal = pal,
values = ~sdo_name,
title = "SDO",
opacity = 1
)
library(readxl)
yield <- read_excel("C:/Users/Nikhila Vijay/Desktop/yield.xlsx")
View(yield)
library(readxl)
yield1 <- read_excel("C:/Users/Nikhila Vijay/Desktop/yield1.xlsx")
View(yield1)
# Load necessary libraries
library(ggplot2)
library(dplyr)
ggplot(yield1, aes(x = water_depth, y = mean_yield)) +
geom_bar(stat = "identity", fill = "blue", width = 0.6) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black") +
labs(
title = "Mean Yield (Quintals) by Water Source Depth (Ft)",
x = "Water Depth",
y = "Average Yield (Quintals)"
) +
theme_minimal()
ggplot(yield, aes(x = water_depth, y = mean_yield)) +
geom_bar(stat = "identity", fill = "blue", width = 0.6) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black") +
labs(
title = "Mean Yield (Quintals) by Water Source Depth (Ft)",
x = "Water Depth",
y = "Average Yield (Quintals)"
) +
theme_minimal()
library(readxl)
yield1 <- read_excel("C:/Users/Nikhila Vijay/Desktop/yield1.xlsx")
View(yield1)
ggplot(yield1, aes(x = water_depth, y = mean_yield)) +
geom_bar(stat = "identity", fill = "blue", width = 0.6) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black") +
labs(
title = "Mean Yield (Quintals) by Water Source Depth (Ft)",
x = "Water Depth",
y = "Average Yield (Quintals)"
) +
theme_minimal()
yield1$water_depth <- factor(yield1$water_depth,
levels = c("Low", "Medium", "High")) # Set the desired order
ggplot(yield1, aes(x = water_depth, y = mean_yield)) +
geom_bar(stat = "identity", fill = "blue", width = 0.6) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black") +
labs(
title = "Mean Yield (Quintals) by Water Source Depth (Ft)",
x = "Water Depth",
y = "Average Yield (Quintals)"
) +
theme_minimal()
yield1$water_depth <- factor(yield1$water_depth,
levels = c("Low", "Medium", "High")) # Set the desired order
ggplot(yield1, aes(x = water_depth, y = mean_yield)) +
geom_bar(stat = "identity", fill = "blue", width = 0.6) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black") +
labs(
title = "Mean Yield (Quintals) by Water Source Depth (Ft)",
x = "Water Depth",
y = "Average Yield (Quintals)"
) +
theme_minimal()
library(readxl)
yield1 <- read_excel("C:/Users/Nikhila Vijay/Desktop/yield1.xlsx")
View(yield1)
library(readxl)
yield1 <- read_excel("C:/Users/Nikhila Vijay/Desktop/yield1.xlsx")
View(yield1)
levels(yield1$water_depth) <- c("Low", "Medium", "High")
ggplot(yield1, aes(x = water_depth, y = mean_yield)) +
geom_bar(stat = "identity", fill = "blue", width = 0.6) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2, color = "black") +
labs(
title = "Mean Yield (Quintals) by Water Source Depth (Ft)",
x = "Water Depth",
y = "Average Yield (Quintals)"
) +
theme_minimal()
install.packages("leaflet")
install.packages("rgdal")
install.packages("raster")
install.packages("sf")
install.packages("shiny")
install.packages("tidyverse")
install.packages("readxl")
install.packages("writexl")
install.packages("wesanderson")
install.packages("bs4Dash")
install.packages("DT")
install.packages("wesanderson")
install.packages("wesanderson")
library(leaflet) #for making the interactive map
library(rgdal)
install.packages("rgdal")
library(rgdal)
setwd('C:/Users/Nikhila Vijay/Desktop/Janaagraha/shiny_nfhs')
nfhs_district <- read_sf("IAGE7AFL.shp")
install.packages("sf")
library(sf)
library(raster) #for importing raster data
library(scales)
library(lattice)
library(sf)
library(shiny)
library(readxl)
library(writexl)
library(RColorBrewer)
library(dplyr)
library(ggplot2)
library(bslib)
library(shinythemes)
library(bs4Dash)
library(DT)
library(wesanderson)
setwd('C:/Users/Nikhila Vijay/Desktop/Janaagraha/shiny_nfhs')
nfhs_district <- read_sf("IAGE7AFL.shp")
setwd('C:/Users/Nikhila Vijay/Desktop/Janaagraha/spatial_data/IAGE7AFL')
nfhs_district <- read_sf("IAGE7AFL.shp")
View(nfhs_district)
setwd('C:/Users/Nikhila Vijay/Desktop/Janaagraha/shiny_nfhs')
nfhs_district <- read_sf("IAGE7AFL.shp")
options("GDAL_SHAPE_RESTORE_SHX" = TRUE)
setwd('C:/Users/Nikhila Vijay/Desktop/Janaagraha/shiny_nfhs')
nfhs_district <- read_sf("IAGE7AFL.shp")
setwd('C:/Users/Nikhila Vijay/Desktop/Janaagraha/shiny_nfhs')
options("GDAL_SHAPE_RESTORE_SHX" = TRUE)
nfhs_district <- read_sf("IAGE7AFL.shp")
setwd('C:/Users/Nikhila Vijay/Desktop/Janaagraha/shiny_nfhs')
nfhs_district <- read_sf("IAGE7AFL.shp")
